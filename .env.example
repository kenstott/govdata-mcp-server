# Calcite JDBC Configuration
CALCITE_JAR_PATH=/path/to/calcite/govdata/build/libs/calcite-govdata-1.41.0-SNAPSHOT-all.jar
CALCITE_MODEL_PATH=/path/to/calcite/djia-production-model.json

# MCP Server Configuration
# Direct connection (no mcp-remote): the MCP server listens over HTTP/SSE at /messages
# Point clients (e.g., Claude Desktop) to http://127.0.0.1:8080/messages with X-API-Key or Bearer token
SERVER_HOST=0.0.0.0
SERVER_PORT=8080
SERVER_RELOAD=false

# Authentication (comma-separated API keys)
API_KEYS=dev-key-12345,prod-key-67890

# JWT Configuration (optional)
JWT_SECRET_KEY=your-secret-key-change-this-in-production
JWT_ALGORITHM=HS256
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30

# OIDC / OAuth2 (optional; enables Azure AD, Google, Keycloak, Auth0, etc.)
# Set OIDC_ENABLED=true and provide ISSUER and AUDIENCE to accept provider tokens.
# ISSUER is your provider's OIDC issuer URL; AUDIENCE is the identifier ("client id" or API identifier)
# that appears in the token's aud claim for this API.
OIDC_ENABLED=false

# Examples:
# - Azure AD:             https://login.microsoftonline.com/<tenant-id>/v2.0
# - Google:               https://accounts.google.com
# - Keycloak (realm):     https://<your-domain>/realms/<realm-name>
# - Auth0:                https://<your-tenant>.auth0.com/
# - Custom OIDC issuer:   https://auth.your-domain.com
OIDC_ISSUER_URL=

# Audience mapping:
# - Azure AD: Application (client) ID or api://<app-id> depending on Expose an API configuration
# - Google:   Your OAuth client ID
# - Keycloak: Client ID of this API (ensure tokens include this audience)
# - Auth0:    API Identifier you configured under Applications -> APIs (often a URL-like value)
# - Custom:   Whatever you set to appear in the token's aud claim for this API
OIDC_AUDIENCE=

# Optional: override JWKS URL (usually auto-discovered from the issuer)
OIDC_JWKS_URL=
# Optional: JWKS cache TTL seconds
OIDC_CACHE_TTL_SECONDS=3600

# When OIDC is enabled, local HS256 JWT fallback is DISABLED by default for security.
# Set to true only if you intentionally want to accept both provider tokens and locally-signed JWTs.
AUTH_ALLOW_LOCAL_JWT_FALLBACK=false

# Logging
LOG_LEVEL=INFO

# ================================
# AWS S3 Configuration (for MinIO or AWS S3)
# ================================
AWS_ACCESS_KEY_ID=minioadmin
AWS_SECRET_ACCESS_KEY=minioadmin
AWS_ENDPOINT_OVERRIDE=http://localhost:9000
GOVDATA_PARQUET_DIR=s3://govdata-parquet
GOVDATA_CACHE_DIR=s3://govdata-production-cache

# ================================
# Government Data API Keys
# ================================
# These also power the offline examples in examples/census_employment_example.py
# FRED API Key (https://fred.stlouisfed.org/docs/api/api_key.html)
FRED_API_KEY=your-fred-api-key-here

# BLS API Key (https://www.bls.gov/developers/api_signature_v2.html)
BLS_API_KEY=your-bls-api-key-here

# BEA API Key (https://apps.bea.gov/API/signup/)
BEA_API_KEY=your-bea-api-key-here

# Census API Key (https://api.census.gov/data/key_signup.html)
CENSUS_API_KEY=your-census-api-key-here

# Optional API Keys
FBI_API_KEY=your-fbi-api-key-here
NHTSA_API_KEY=your-nhtsa-api-key-here
FEMA_API_KEY=your-fema-api-key-here
OPENALEX_API_KEY=your-openalex-api-key-here

# HUD Credentials
HUD_TOKEN=your-hud-token-here
HUD_USERNAME=your-hud-username-here
HUD_PASSWORD=your-hud-password-here

# Alpha Vantage API Key
ALPHA_VANTAGE_KEY=your-alpha-vantage-key-here

# ================================
# Calcite Configuration
# ================================
CALCITE_EXECUTION_ENGINE=DUCKDB
GOVDATA_DOWNLOAD_TIMEOUT_MINUTES=2147483647
